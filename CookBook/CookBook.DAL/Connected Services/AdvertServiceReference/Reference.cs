//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CookBook.DAL.AdvertServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AdvertType", Namespace="http://schemas.datacontract.org/2004/07/AdvertService.Models")]
    [System.SerializableAttribute()]
    public partial class AdvertType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ImageByteArrayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ImageIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] ImageByteArray {
            get {
                return this.ImageByteArrayField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageByteArrayField, value) != true)) {
                    this.ImageByteArrayField = value;
                    this.RaisePropertyChanged("ImageByteArray");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ImageId {
            get {
                return this.ImageIdField;
            }
            set {
                if ((this.ImageIdField.Equals(value) != true)) {
                    this.ImageIdField = value;
                    this.RaisePropertyChanged("ImageId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AdvertServiceReference.IAdvertContract")]
    public interface IAdvertContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdvertContract/GetAdvertImages", ReplyAction="http://tempuri.org/IAdvertContract/GetAdvertImagesResponse")]
        CookBook.DAL.AdvertServiceReference.AdvertType[] GetAdvertImages(string directoryPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdvertContract/GetAdvertImages", ReplyAction="http://tempuri.org/IAdvertContract/GetAdvertImagesResponse")]
        System.Threading.Tasks.Task<CookBook.DAL.AdvertServiceReference.AdvertType[]> GetAdvertImagesAsync(string directoryPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdvertContract/GetRandomImageIds", ReplyAction="http://tempuri.org/IAdvertContract/GetRandomImageIdsResponse")]
        int[] GetRandomImageIds(string directoryPath, int numberOfImages);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdvertContract/GetRandomImageIds", ReplyAction="http://tempuri.org/IAdvertContract/GetRandomImageIdsResponse")]
        System.Threading.Tasks.Task<int[]> GetRandomImageIdsAsync(string directoryPath, int numberOfImages);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAdvertContractChannel : CookBook.DAL.AdvertServiceReference.IAdvertContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AdvertContractClient : System.ServiceModel.ClientBase<CookBook.DAL.AdvertServiceReference.IAdvertContract>, CookBook.DAL.AdvertServiceReference.IAdvertContract {
        
        public AdvertContractClient() {
        }
        
        public AdvertContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AdvertContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AdvertContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AdvertContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public CookBook.DAL.AdvertServiceReference.AdvertType[] GetAdvertImages(string directoryPath) {
            return base.Channel.GetAdvertImages(directoryPath);
        }
        
        public System.Threading.Tasks.Task<CookBook.DAL.AdvertServiceReference.AdvertType[]> GetAdvertImagesAsync(string directoryPath) {
            return base.Channel.GetAdvertImagesAsync(directoryPath);
        }
        
        public int[] GetRandomImageIds(string directoryPath, int numberOfImages) {
            return base.Channel.GetRandomImageIds(directoryPath, numberOfImages);
        }
        
        public System.Threading.Tasks.Task<int[]> GetRandomImageIdsAsync(string directoryPath, int numberOfImages) {
            return base.Channel.GetRandomImageIdsAsync(directoryPath, numberOfImages);
        }
    }
}
